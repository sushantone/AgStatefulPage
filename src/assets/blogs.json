[
    {
        "author" : "Author 1",
        "title" : "Function.prototype.bind()",
        "content" : "The bind() function creates a new bound function, which is an exotic function object (a term from ECMAScript 2015) that wraps the original function object. Calling the bound function generally results in the execution of its wrapped function."
    },
    {
        "author" : "Author 1",
        "title" : "Function.prototype.apply()",
        "content" : "The apply() method calls a function with a given this value, and arguments provided as an array (or an array-like object)."
    },
    {
        "author" : "Author 2",
        "title" : "Function.prototype.call()",
        "content" : "The call() allows for a function/method belonging to one object to be assigned and called for a different object.        call() provides a new value of this to the function/method. With call(), you can write a method once and then inherit it in another object, without having to rewrite the method for the new object."
    },
    {
        "author" : "Author 3",
        "title" : "Function.prototype.toString()",
        "content" : "The Function object overrides the toString method inherited from Object; it does not inherit Object.prototype.toString. For user-defined Function objects, the toString method returns a string containing the source text segment which was used to define the function.         JavaScript calls the toString method automatically when a Function is to be represented as a text value, e.g. when a function is concatenated with a string.        The toString() method will throw a TypeError exception ('Function.prototype.toString called on incompatible object'), if its this value object is not a Function object."
    },
    {
        "author" : "Author 3",
        "title" : "Function.prototype.toSource()",
        "content" : "The toSource() method returns a string representing the source code of the object. This method is usually called internally by JavaScript and not explicitly in code. You can call toSource() while debugging to examine the contents of an object."
    }


]